### 005-Programación de bases de datos\005-Procedimientos almacenados. Funciones de usuario

#### Introducción

En MySQL, la programación de bases de datos no solo se limita a la manipulación de datos mediante sentencias SQL estándar. MySQL también permite crear procedimientos almacenados y funciones de usuario, que son bloques de código SQL que se almacenan en la base de datos y pueden ser reutilizados para realizar tareas específicas. Estos elementos son fundamentales para la creación de aplicaciones más eficientes y manejables.

#### Procedimientos Almacenados

##### Definición

Un procedimiento almacenado es un conjunto de instrucciones SQL que se almacena en la base de datos y se puede ejecutar mediante una llamada específica. Los procedimientos almacenados permiten realizar operaciones repetitivas y complejas con facilidad y mejoran la eficiencia al reducir el tráfico de red entre la aplicación y la base de datos.

##### Creación de Procedimientos Almacenados

Para crear un procedimiento almacenado en MySQL, se utiliza la sentencia `CREATE PROCEDURE`. A continuación, se muestra un ejemplo básico de cómo definir un procedimiento almacenado:

```sql
DELIMITER //

CREATE PROCEDURE procedimientoEjemplo (IN parametro1 INT, OUT resultado INT)
BEGIN
    SELECT COUNT(*) INTO resultado
    FROM tablaEjemplo
    WHERE columnaEjemplo = parametro1;
END //

DELIMITER ;
```

En este ejemplo:
- `procedimientoEjemplo` es el nombre del procedimiento.
- `parametro1` es un parámetro de entrada.
- `resultado` es un parámetro de salida que almacena el resultado de la consulta.

##### Llamada a Procedimientos Almacenados

Para ejecutar un procedimiento almacenado, se utiliza la sentencia `CALL`:

```sql
SET @resultado = 0;
CALL procedimientoEjemplo(10, @resultado);
SELECT @resultado;
```

##### Beneficios de los Procedimientos Almacenados

- **Reutilización de código**: Los procedimientos almacenados se pueden ejecutar desde diferentes partes de una aplicación.
- **Seguridad**: Permiten encapsular la lógica de negocio, limitando el acceso directo a las tablas.
- **Rendimiento**: Reducen el tráfico de red y mejoran la eficiencia de la ejecución de consultas.

#### Funciones de Usuario

##### Definición

Las funciones de usuario son similares a los procedimientos almacenados, pero están diseñadas para devolver un valor único y se pueden utilizar en sentencias SQL como cualquier otra función incorporada de MySQL.

##### Creación de Funciones de Usuario

Para crear una función de usuario, se utiliza la sentencia `CREATE FUNCTION`. A continuación, se muestra un ejemplo básico:

```sql
DELIMITER //

CREATE FUNCTION funcionEjemplo (parametro1 INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE resultado INT;
    SELECT COUNT(*) INTO resultado
    FROM tablaEjemplo
    WHERE columnaEjemplo = parametro1;
    RETURN resultado;
END //

DELIMITER ;
```

En este ejemplo:
- `funcionEjemplo` es el nombre de la función.
- `parametro1` es un parámetro de entrada.
- La función devuelve un valor entero (`RETURNS INT`).

##### Uso de Funciones de Usuario

Las funciones de usuario se pueden utilizar en sentencias SQL como cualquier otra función:

```sql
SELECT funcionEjemplo(10);
```

##### Beneficios de las Funciones de Usuario

- **Simplicidad**: Facilitan la reutilización de lógica común en diferentes consultas.
- **Encapsulación**: Ayudan a mantener el código más limpio y organizado al encapsular la lógica en funciones reutilizables.

#### Buenas Prácticas

1. **Modularización**: Divida la lógica compleja en procedimientos y funciones más pequeñas y manejables.
2. **Documentación**: Documente cada procedimiento y función con comentarios claros sobre su propósito y uso.
3. **Manejo de Errores**: Implemente el manejo de errores dentro de procedimientos y funciones para mejorar la robustez de la aplicación.
4. **Optimización**: Asegúrese de que los procedimientos y funciones estén optimizados para el rendimiento, especialmente cuando se espera que manejen grandes volúmenes de datos.

#### Conclusión

Los procedimientos almacenados y las funciones de usuario son herramientas poderosas en MySQL que permiten automatizar y optimizar tareas recurrentes. Su uso adecuado puede mejorar significativamente el rendimiento y la mantenibilidad de las aplicaciones de bases de datos.