### 002-Bases de datos relacionales\008-Claves ajenas

#### Introducción
En el mundo de las bases de datos relacionales, las claves ajenas (foreign keys) son fundamentales para mantener la integridad referencial entre diferentes tablas. A través de las claves ajenas, podemos establecer relaciones entre tablas que reflejan las conexiones lógicas del mundo real, asegurando que los datos se mantengan consistentes y coherentes.

#### Concepto de Clave Ajena
Una clave ajena es un campo o conjunto de campos en una tabla que se refiere a la clave primaria en otra tabla. Este vínculo entre las tablas garantiza que los datos relacionados se mantengan sincronizados y que la integridad referencial se conserve.

#### Definición y Uso
La clave ajena se define en la tabla hija y apunta a la clave primaria de la tabla padre. La sintaxis en SQL para definir una clave ajena durante la creación de una tabla es la siguiente:

```sql
CREATE TABLE tabla_hija (
    id_hija INT,
    id_padre INT,
    otros_campos,
    PRIMARY KEY (id_hija),
    FOREIGN KEY (id_padre) REFERENCES tabla_padre(id_padre)
);
```

En este ejemplo, `id_padre` en `tabla_hija` es la clave ajena que hace referencia a `id_padre` en `tabla_padre`.

#### Propósito de las Claves Ajenas
1. **Integridad Referencial**: Las claves ajenas ayudan a mantener la integridad referencial asegurando que los registros relacionados en una tabla existan en otra tabla.
2. **Normalización**: Facilitan la normalización de la base de datos al dividir los datos en tablas lógicas y relacionadas.
3. **Consistencia de Datos**: Previenen inconsistencias y errores, como la eliminación de un registro que tiene dependencias en otras tablas.

#### Ejemplo Práctico
Consideremos dos tablas en una base de datos de una tienda en línea: `clientes` y `pedidos`.

```sql
CREATE TABLE clientes (
    cliente_id INT PRIMARY KEY,
    nombre VARCHAR(50),
    email VARCHAR(50)
);

CREATE TABLE pedidos (
    pedido_id INT PRIMARY KEY,
    fecha_pedido DATE,
    cliente_id INT,
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id)
);
```

En este ejemplo:
- La tabla `clientes` tiene un campo `cliente_id` que es su clave primaria.
- La tabla `pedidos` tiene un campo `cliente_id` que es una clave ajena referenciando `cliente_id` en `clientes`.

#### Operaciones con Claves Ajenas
1. **Inserción**: Al insertar un registro en la tabla hija, el valor de la clave ajena debe existir en la tabla padre.
   ```sql
   INSERT INTO clientes (cliente_id, nombre, email) VALUES (1, 'Juan Perez', 'juan@example.com');
   INSERT INTO pedidos (pedido_id, fecha_pedido, cliente_id) VALUES (101, '2023-10-01', 1);
   ```

2. **Eliminación**: No se puede eliminar un registro de la tabla padre si existen registros relacionados en la tabla hija, a menos que se utilice `ON DELETE CASCADE` para eliminar también los registros relacionados en la tabla hija.
   ```sql
   DELETE FROM clientes WHERE cliente_id = 1; -- Error si existen pedidos relacionados
   ```

3. **Actualización**: Al actualizar una clave primaria referenciada, la clave ajena debe actualizarse también, o se puede definir la regla `ON UPDATE CASCADE`.
   ```sql
   UPDATE clientes SET cliente_id = 2 WHERE cliente_id = 1; -- Si ON UPDATE CASCADE está definido
   ```

#### Restricciones Adicionales
- **ON DELETE CASCADE**: Al eliminar un registro de la tabla padre, también se eliminan los registros relacionados en la tabla hija.
- **ON UPDATE CASCADE**: Al actualizar una clave primaria en la tabla padre, las claves ajenas en la tabla hija se actualizan automáticamente.
- **ON DELETE SET NULL**: Al eliminar un registro de la tabla padre, el valor de la clave ajena en la tabla hija se establece en NULL.

```sql
CREATE TABLE pedidos (
    pedido_id INT PRIMARY KEY,
    fecha_pedido DATE,
    cliente_id INT,
    FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id) ON DELETE CASCADE
);
```

#### Conclusión
Las claves ajenas son esenciales para mantener la integridad y coherencia de los datos en una base de datos relacional. Al establecer relaciones claras entre tablas, las claves ajenas facilitan un diseño de base de datos robusto y eficiente, previniendo inconsistencias y asegurando que las operaciones de datos se realicen de manera segura y lógica.