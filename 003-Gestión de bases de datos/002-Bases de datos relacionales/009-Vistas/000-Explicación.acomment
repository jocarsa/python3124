### 002-Bases de datos relacionales\009-Vistas

#### Introducción a las Vistas

En el contexto de las bases de datos relacionales, una vista es una consulta almacenada que se puede tratar como una tabla virtual. Esta tabla virtual no almacena los datos por sí misma, sino que obtiene los datos de una o más tablas base cada vez que se accede a ella. Por lo tanto, una vista proporciona una forma encapsulada de acceder a los datos, permitiendo varias funcionalidades y beneficios.

#### Características de las Vistas

1. **Abstracción y Simplificación:**
   - Las vistas permiten a los usuarios simplificar consultas complejas al encapsular las mismas en una única vista. Esto facilita la consulta de datos al ocultar la complejidad subyacente.

2. **Seguridad:**
   - Mediante el uso de vistas, se puede restringir el acceso a los datos sensibles. Los usuarios pueden tener permisos para acceder a una vista sin tener acceso directo a las tablas subyacentes.

3. **Mantenimiento de Integridad:**
   - Las vistas pueden ayudar a mantener la integridad referencial y de datos al proporcionar una interfaz constante a los datos subyacentes.

4. **Reutilización:**
   - Las vistas permiten la reutilización de consultas SQL complejas sin tener que reescribirlas cada vez que se necesitan.

#### Creación de Vistas

Para crear una vista en MySQL, se utiliza la instrucción `CREATE VIEW`. La sintaxis básica es la siguiente:

```sql
CREATE VIEW nombre_de_la_vista AS
SELECT columnas
FROM tablas
WHERE condiciones;
```

**Ejemplo:**

Supongamos que tenemos una tabla `empleados` con las siguientes columnas: `id`, `nombre`, `departamento`, `salario`. Si deseamos crear una vista que muestre solo los nombres y salarios de los empleados del departamento 'Ventas', podríamos hacerlo de la siguiente manera:

```sql
CREATE VIEW vista_ventas AS
SELECT nombre, salario
FROM empleados
WHERE departamento = 'Ventas';
```

#### Uso de Vistas

Una vez creada, una vista se puede utilizar como cualquier otra tabla en consultas SQL. Por ejemplo:

```sql
SELECT * FROM vista_ventas;
```

Esta consulta devolverá todos los nombres y salarios de los empleados del departamento de ventas.

#### Modificación y Eliminación de Vistas

- **Modificación:**
  Para modificar una vista existente, se utiliza la instrucción `ALTER VIEW`:

  ```sql
  ALTER VIEW vista_ventas AS
  SELECT nombre, salario, id
  FROM empleados
  WHERE departamento = 'Ventas';
  ```

- **Eliminación:**
  Para eliminar una vista, se utiliza la instrucción `DROP VIEW`:

  ```sql
  DROP VIEW vista_ventas;
  ```

#### Limitaciones y Consideraciones

1. **Actualización de Vistas:**
   - No todas las vistas son actualizables. Una vista es actualizable si la consulta que define la vista cumple ciertos criterios, como no contener funciones agregadas (`SUM`, `AVG`, etc.), no tener cláusulas `DISTINCT`, `GROUP BY`, `HAVING`, y no combinar múltiples tablas sin una clave primaria unificada.

2. **Rendimiento:**
   - Aunque las vistas pueden simplificar el acceso a los datos y mejorar la seguridad, también pueden impactar el rendimiento si no se diseñan y utilizan adecuadamente.

3. **Dependencias:**
   - Las vistas dependen de las tablas subyacentes. Si se realizan cambios en las tablas subyacentes (como la eliminación de una columna), las vistas que dependen de esas tablas pueden volverse inválidas.

#### Conclusión

Las vistas son una poderosa herramienta en el arsenal de un administrador de bases de datos, proporcionando una forma eficaz de simplificar consultas complejas, mejorar la seguridad y mantener la integridad de los datos. Sin embargo, es importante comprender sus limitaciones y usarlas adecuadamente para maximizar sus beneficios.