### 002-Bases de datos relacionales\004-Claves primarias

#### Claves Primarias en Bases de Datos Relacionales

Las claves primarias son un concepto fundamental en las bases de datos relacionales. Sirven como identificadores únicos para cada fila (o registro) en una tabla. A continuación, se detallan los aspectos más importantes acerca de las claves primarias.

#### 1. Definición de Clave Primaria

Una clave primaria es una columna o un conjunto de columnas que identifica de manera única cada fila en una tabla. La principal función de una clave primaria es garantizar que cada registro en la tabla sea único y fácilmente identificable.

#### 2. Características de las Claves Primarias

- **Unicidad**: Cada valor de la clave primaria debe ser único en la tabla. No puede haber dos filas con el mismo valor en la columna de la clave primaria.
- **No Nulo**: Los valores de la clave primaria no pueden ser nulos. Esto asegura que cada fila tenga un identificador válido.
- **Inmutabilidad**: Una vez asignado, el valor de la clave primaria no debe cambiar. Esto preserva la integridad referencial en la base de datos.
- **Simplicidad**: Se recomienda que las claves primarias sean simples y consistan en el menor número posible de columnas.

#### 3. Tipos de Claves Primarias

- **Clave Primaria Simple**: Es una única columna que se usa como clave primaria.
  ```sql
  CREATE TABLE empleados (
      empleado_id INT AUTO_INCREMENT,
      nombre VARCHAR(50),
      apellido VARCHAR(50),
      PRIMARY KEY (empleado_id)
  );
  ```

- **Clave Primaria Compuesta**: Es una clave primaria que consta de dos o más columnas.
  ```sql
  CREATE TABLE matriculas (
      estudiante_id INT,
      curso_id INT,
      fecha_matricula DATE,
      PRIMARY KEY (estudiante_id, curso_id)
  );
  ```

#### 4. Creación de Claves Primarias

La clave primaria se puede definir al momento de la creación de la tabla o se puede agregar posteriormente a una tabla existente.

- **Al crear la tabla**:
  ```sql
  CREATE TABLE productos (
      producto_id INT AUTO_INCREMENT,
      nombre VARCHAR(100),
      precio DECIMAL(10, 2),
      PRIMARY KEY (producto_id)
  );
  ```

- **En una tabla existente**:
  ```sql
  ALTER TABLE productos
  ADD PRIMARY KEY (producto_id);
  ```

#### 5. Consideraciones en el Diseño

- **Índices**: Las claves primarias automáticamente crean un índice único en la columna(s), lo que mejora la eficiencia de las búsquedas y las operaciones de join.
- **Relaciones**: Las claves primarias son fundamentales para definir relaciones entre tablas mediante claves foráneas.
- **Generación Automática**: En muchos casos, se utilizan valores generados automáticamente (AUTO_INCREMENT en MySQL) para las claves primarias, lo que facilita la asignación de identificadores únicos.

#### 6. Ejemplos Prácticos

- **Tabla de Clientes**:
  ```sql
  CREATE TABLE clientes (
      cliente_id INT AUTO_INCREMENT,
      nombre VARCHAR(50),
      email VARCHAR(100),
      PRIMARY KEY (cliente_id)
  );
  ```

- **Tabla de Pedidos**:
  ```sql
  CREATE TABLE pedidos (
      pedido_id INT AUTO_INCREMENT,
      cliente_id INT,
      fecha_pedido DATE,
      PRIMARY KEY (pedido_id),
      FOREIGN KEY (cliente_id) REFERENCES clientes(cliente_id)
  );
  ```

En este ejemplo, `pedido_id` es la clave primaria de la tabla `pedidos`, y `cliente_id` es una clave foránea que referencia a la clave primaria `cliente_id` en la tabla `clientes`.

#### 7. Buenas Prácticas

- **Evitar el uso de datos sensibles** como claves primarias (por ejemplo, números de seguridad social).
- **Usar claves sustitutas** (como números generados automáticamente) en lugar de claves naturales (como combinaciones de campos existentes), ya que las claves sustitutas son más fáciles de gestionar y menos propensas a cambios.

Las claves primarias son esenciales para la integridad y el rendimiento de las bases de datos relacionales, permitiendo una gestión eficiente y segura de los datos. Asegurarse de definirlas correctamente es fundamental para el diseño y funcionamiento de cualquier sistema de base de datos.