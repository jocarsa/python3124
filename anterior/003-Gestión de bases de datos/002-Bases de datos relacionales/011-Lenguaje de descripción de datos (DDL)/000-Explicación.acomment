### 002-Bases de datos relacionales\011-Lenguaje de descripción de datos (DDL)

#### Introducción al Lenguaje de Descripción de Datos (DDL)

El Lenguaje de Descripción de Datos, conocido por sus siglas en inglés DDL (Data Definition Language), es una parte fundamental del SQL (Structured Query Language) que se utiliza para definir y gestionar la estructura de las bases de datos relacionales. A diferencia de otros lenguajes SQL que manipulan los datos (como DML, Data Manipulation Language), DDL se centra en definir y modificar la arquitectura de la base de datos. Las operaciones DDL son fundamentales para la creación, alteración y eliminación de objetos dentro de la base de datos, tales como tablas, índices y esquemas.

#### Operaciones Básicas del DDL

1. **CREATE**: Esta sentencia se utiliza para crear nuevos objetos en la base de datos. Los objetos más comunes que se crean son tablas, índices y vistas.

    - **CREATE TABLE**: Define una nueva tabla en la base de datos.
    ```sql
    CREATE TABLE nombre_tabla (
        columna1 tipo_dato restricciones,
        columna2 tipo_dato restricciones,
        ...
    );
    ```
    Ejemplo:
    ```sql
    CREATE TABLE empleados (
        id INT PRIMARY KEY,
        nombre VARCHAR(100),
        apellido VARCHAR(100),
        fecha_contratacion DATE
    );
    ```

    - **CREATE INDEX**: Crea un índice en una o varias columnas de una tabla para mejorar el rendimiento de las consultas.
    ```sql
    CREATE INDEX nombre_indice ON nombre_tabla (columna1, columna2, ...);
    ```

    - **CREATE VIEW**: Define una vista, que es una consulta almacenada que puede ser tratada como una tabla virtual.
    ```sql
    CREATE VIEW nombre_vista AS
    SELECT columnas
    FROM nombre_tabla
    WHERE condiciones;
    ```

2. **ALTER**: Esta sentencia permite modificar la estructura de los objetos existentes en la base de datos.

    - **ALTER TABLE**: Se usa para agregar, modificar o eliminar columnas en una tabla.
    ```sql
    ALTER TABLE nombre_tabla
    ADD columna tipo_dato restricciones;
    ```
    Ejemplo:
    ```sql
    ALTER TABLE empleados
    ADD direccion VARCHAR(255);
    ```

    - **ALTER TABLE ... MODIFY**: Modifica una columna existente.
    ```sql
    ALTER TABLE nombre_tabla
    MODIFY columna tipo_dato restricciones;
    ```
    
    - **ALTER TABLE ... DROP**: Elimina una columna de una tabla.
    ```sql
    ALTER TABLE nombre_tabla
    DROP COLUMN nombre_columna;
    ```

3. **DROP**: Esta sentencia se utiliza para eliminar objetos de la base de datos.

    - **DROP TABLE**: Elimina una tabla y todos sus datos.
    ```sql
    DROP TABLE nombre_tabla;
    ```

    - **DROP INDEX**: Elimina un índice existente.
    ```sql
    DROP INDEX nombre_indice ON nombre_tabla;
    ```

    - **DROP VIEW**: Elimina una vista.
    ```sql
    DROP VIEW nombre_vista;
    ```

4. **TRUNCATE**: Esta sentencia elimina todos los registros de una tabla de manera rápida y eficiente, pero mantiene la estructura de la tabla.
    ```sql
    TRUNCATE TABLE nombre_tabla;
    ```

#### Consideraciones Importantes

- **Persistencia**: Las operaciones DDL son transacciones implícitas y se confirman automáticamente. No se pueden revertir utilizando la sentencia ROLLBACK.
- **Permisos**: La ejecución de comandos DDL generalmente requiere permisos administrativos. Asegúrese de que el usuario tenga los privilegios adecuados.
- **Integridad de Datos**: Modificar la estructura de una tabla puede afectar la integridad de los datos. Por ejemplo, eliminar una columna puede resultar en la pérdida de datos.

#### Conclusión

El Lenguaje de Descripción de Datos (DDL) es una herramienta poderosa y esencial para cualquier administrador de bases de datos o desarrollador que trabaje con bases de datos relacionales. A través de comandos como CREATE, ALTER, DROP y TRUNCATE, el DDL permite definir y modificar la estructura de la base de datos, asegurando que los datos se almacenen de manera eficiente y se mantenga la integridad de la información. Familiarizarse con estos comandos es crucial para gestionar con éxito cualquier base de datos relacional.