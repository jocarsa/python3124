### 003-Realización de consultas\006-Composiciones externas

#### Introducción
En el contexto de bases de datos relacionales, las composiciones externas (o "outer joins" en inglés) son una técnica fundamental para combinar filas de dos o más tablas basadas en una condición relacionada. A diferencia de las composiciones internas (inner joins), que solo devuelven las filas que tienen coincidencias en ambas tablas, las composiciones externas también incluyen las filas que no tienen coincidencias en una de las tablas.

#### Tipos de Composiciones Externas
Existen tres tipos principales de composiciones externas:
1. **Composición externa izquierda (LEFT JOIN)**
2. **Composición externa derecha (RIGHT JOIN)**
3. **Composición externa completa (FULL OUTER JOIN)**

##### 1. Composición externa izquierda (LEFT JOIN)
La composición externa izquierda devuelve todas las filas de la tabla de la izquierda (la primera tabla mencionada en la consulta), y las filas coincidentes de la tabla de la derecha. Si no hay coincidencia, las filas de la tabla de la izquierda aún se incluirán en el resultado, con valores NULL para las columnas de la tabla de la derecha.

###### Sintaxis:
```sql
SELECT columnas
FROM tabla1
LEFT JOIN tabla2
ON tabla1.columna = tabla2.columna;
```

###### Ejemplo:
```sql
SELECT empleados.nombre, departamentos.nombre
FROM empleados
LEFT JOIN departamentos
ON empleados.departamento_id = departamentos.id;
```
En este ejemplo, se seleccionan todos los empleados y sus departamentos. Si un empleado no está asignado a un departamento, aún se mostrará en el resultado con el nombre del departamento como NULL.

##### 2. Composición externa derecha (RIGHT JOIN)
La composición externa derecha es similar a la composición externa izquierda, pero devuelve todas las filas de la tabla de la derecha y las filas coincidentes de la tabla de la izquierda. Si no hay coincidencia, las filas de la tabla de la derecha aún se incluirán en el resultado, con valores NULL para las columnas de la tabla de la izquierda.

###### Sintaxis:
```sql
SELECT columnas
FROM tabla1
RIGHT JOIN tabla2
ON tabla1.columna = tabla2.columna;
```

###### Ejemplo:
```sql
SELECT empleados.nombre, departamentos.nombre
FROM empleados
RIGHT JOIN departamentos
ON empleados.departamento_id = departamentos.id;
```
En este ejemplo, se seleccionan todos los departamentos y los empleados asignados a cada uno. Si un departamento no tiene empleados asignados, aún se mostrará en el resultado con el nombre del empleado como NULL.

##### 3. Composición externa completa (FULL OUTER JOIN)
La composición externa completa combina los resultados de las composiciones externas izquierda y derecha. Devuelve todas las filas cuando hay una coincidencia en una de las tablas. Si no hay coincidencia, se devuelven las filas no coincidentes de ambas tablas, con valores NULL para las columnas que no tienen coincidencia.

###### Sintaxis:
```sql
SELECT columnas
FROM tabla1
FULL OUTER JOIN tabla2
ON tabla1.columna = tabla2.columna;
```

###### Ejemplo:
```sql
SELECT empleados.nombre, departamentos.nombre
FROM empleados
FULL OUTER JOIN departamentos
ON empleados.departamento_id = departamentos.id;
```
En este ejemplo, se seleccionan todos los empleados y sus departamentos, así como todos los departamentos y sus empleados. Si no hay coincidencia, se incluirán las filas no coincidentes de ambas tablas con valores NULL donde corresponda.

#### Consideraciones de rendimiento
Las composiciones externas pueden ser más costosas en términos de rendimiento que las composiciones internas, especialmente en tablas grandes. Es importante optimizar estas consultas mediante el uso de índices y otros mecanismos de optimización de bases de datos para asegurar un rendimiento adecuado.

#### Conclusión
Las composiciones externas son una herramienta poderosa para combinar datos de múltiples tablas en una base de datos relacional. Al entender y utilizar correctamente LEFT JOIN, RIGHT JOIN y FULL OUTER JOIN, se pueden obtener conjuntos de resultados que reflejen con precisión las relaciones entre las diferentes entidades en su base de datos.