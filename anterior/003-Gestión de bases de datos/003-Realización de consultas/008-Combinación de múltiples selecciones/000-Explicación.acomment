### 003-Realización de consultas\008-Combinación de múltiples selecciones

#### Introducción

En el contexto de bases de datos relacionales y específicamente en MySQL, la combinación de múltiples selecciones permite la integración de resultados de varias consultas en una sola operación. Esta capacidad es esencial para generar informes complejos, manejar datos de múltiples fuentes y realizar análisis avanzados. Las herramientas más comunes para combinar selecciones son las operaciones UNION, UNION ALL, INTERSECT y EXCEPT.

#### UNION y UNION ALL

**UNION** y **UNION ALL** son los operadores más utilizados para combinar los resultados de dos o más consultas SELECT.

- **UNION**: Combina los resultados de dos o más consultas en un conjunto de resultados único, eliminando los duplicados.
- **UNION ALL**: Combina los resultados de dos o más consultas, incluyendo todos los duplicados.

##### Sintaxis

```sql
SELECT column1, column2, ...
FROM table1
WHERE condition
UNION [ALL]
SELECT column1, column2, ...
FROM table2
WHERE condition;
```

##### Ejemplo

```sql
-- Combina los nombres de clientes y proveedores sin duplicados
SELECT name, email
FROM customers
UNION
SELECT name, email
FROM suppliers;

-- Combina los nombres de clientes y proveedores incluyendo duplicados
SELECT name, email
FROM customers
UNION ALL
SELECT name, email
FROM suppliers;
```

#### INTERSECT y EXCEPT

**INTERSECT** y **EXCEPT** son operadores que permiten realizar operaciones set-like en los resultados de dos consultas. Aunque no son directamente soportados por MySQL, se pueden emular utilizando combinaciones de subconsultas y JOINs.

- **INTERSECT**: Devuelve las filas comunes a ambas consultas.
- **EXCEPT**: Devuelve las filas que están en la primera consulta pero no en la segunda.

##### Emulación de INTERSECT en MySQL

```sql
SELECT column1, column2, ...
FROM table1
WHERE condition
AND (column1, column2, ...) IN (
    SELECT column1, column2, ...
    FROM table2
    WHERE condition
);
```

##### Ejemplo

```sql
-- Encuentra los nombres de clientes que también son proveedores
SELECT name, email
FROM customers
WHERE (name, email) IN (
    SELECT name, email
    FROM suppliers
);
```

##### Emulación de EXCEPT en MySQL

```sql
SELECT column1, column2, ...
FROM table1
WHERE condition
AND (column1, column2, ...) NOT IN (
    SELECT column1, column2, ...
    FROM table2
    WHERE condition
);
```

##### Ejemplo

```sql
-- Encuentra los nombres de clientes que no son proveedores
SELECT name, email
FROM customers
WHERE (name, email) NOT IN (
    SELECT name, email
    FROM suppliers
);
```

#### Consideraciones de Rendimiento

- **Índices**: Asegúrese de que las columnas utilizadas en las cláusulas WHERE y JOIN estén indexadas para mejorar el rendimiento.
- **Duplicados**: Use UNION ALL en lugar de UNION si no necesita eliminar duplicados, ya que UNION ALL es más rápido.
- **Optimizaciones**: MySQL puede optimizar algunas combinaciones de consultas, pero es importante revisar los planes de ejecución (EXPLAIN) para identificar posibles cuellos de botella.

#### Buenas Prácticas

- **Claridad**: Siempre que sea posible, use alias para las tablas y columnas para mejorar la legibilidad.
- **Documentación**: Documente las consultas complejas para facilitar el mantenimiento y la comprensión futura.
- **Validación**: Verifique los resultados de las consultas combinadas para asegurarse de que los datos se están uniendo correctamente y de que no hay pérdidas de datos importantes.

#### Conclusión

La combinación de múltiples selecciones en MySQL es una técnica poderosa que permite integrar y analizar datos de manera eficiente. Al utilizar operadores como UNION, UNION ALL y emular INTERSECT y EXCEPT, se puede lograr una gran flexibilidad en las consultas. Comprender y aplicar estas técnicas correctamente puede mejorar significativamente la capacidad para manejar y analizar datos en bases de datos relacionales.