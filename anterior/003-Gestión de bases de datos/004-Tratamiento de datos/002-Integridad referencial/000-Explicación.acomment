### 004-Tratamiento de datos\002-Integridad referencial

#### Introducción

La integridad referencial es un concepto fundamental en el diseño y gestión de bases de datos relacionales. Se refiere a la consistencia y validez de las relaciones entre las tablas de una base de datos. La integridad referencial asegura que las relaciones entre tablas sean válidas y que los datos no estén huérfanos o inconsistentes.

#### Conceptos básicos

1. **Clave primaria (Primary Key)**: Una columna o un conjunto de columnas en una tabla que identifica de manera única cada fila. No puede contener valores NULL y debe ser única en la tabla.

2. **Clave foránea (Foreign Key)**: Una columna o un conjunto de columnas en una tabla que establece y aplica un enlace entre los datos en dos tablas. La clave foránea en una tabla apunta a una clave primaria en otra tabla.

#### Importancia de la integridad referencial

1. **Consistencia de datos**: Garantiza que las relaciones entre las tablas permanezcan válidas y consistentes.
2. **Prevención de datos huérfanos**: Evita que existan registros en una tabla que no tengan una relación válida en otra tabla.
3. **Mantenimiento de la integridad de la base de datos**: Ayuda a mantener la integridad y exactitud de los datos a lo largo del tiempo.

#### Implementación de la integridad referencial en MySQL

En MySQL, la integridad referencial se implementa mediante el uso de claves foráneas y restricciones. A continuación, se detalla cómo se pueden definir y manejar estas relaciones.

##### Creación de claves foráneas

Para crear una clave foránea en MySQL, se utiliza la cláusula `FOREIGN KEY` en una instrucción `CREATE TABLE` o `ALTER TABLE`. Aquí hay un ejemplo básico:

```sql
CREATE TABLE departamentos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL
);

CREATE TABLE empleados (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    departamento_id INT,
    FOREIGN KEY (departamento_id) REFERENCES departamentos(id)
);
```

En este ejemplo, la columna `departamento_id` en la tabla `empleados` es una clave foránea que hace referencia a la columna `id` en la tabla `departamentos`.

##### Restricciones de integridad referencial

MySQL permite definir acciones que se deben tomar cuando se actualizan o eliminan registros en las tablas relacionadas. Estas acciones se pueden especificar mediante las cláusulas `ON DELETE` y `ON UPDATE`. Las opciones incluyen:

- `CASCADE`: Al eliminar o actualizar el registro padre, los registros hijos correspondientes también se eliminan o actualizan.
- `SET NULL`: Al eliminar o actualizar el registro padre, los registros hijos correspondientes se establecen en NULL.
- `RESTRICT`: Impide la eliminación o actualización del registro padre si existen registros hijos relacionados.
- `NO ACTION`: Similar a `RESTRICT`, pero ejecutado después de otras restricciones.

Ejemplo:

```sql
CREATE TABLE empleados (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL,
    departamento_id INT,
    FOREIGN KEY (departamento_id) REFERENCES departamentos(id)
    ON DELETE SET NULL
    ON UPDATE CASCADE
);
```

En este ejemplo, si un registro en la tabla `departamentos` se elimina, los valores `departamento_id` en la tabla `empleados` se establecerán en NULL. Si un registro en la tabla `departamentos` se actualiza, los valores correspondientes en la tabla `empleados` se actualizarán en consecuencia.

##### Verificación de la integridad referencial

Para garantizar que la integridad referencial se mantenga, MySQL verifica automáticamente las restricciones de clave foránea durante las operaciones de inserción, actualización y eliminación. Si se intenta realizar una operación que viola la integridad referencial, MySQL generará un error y rechazará la operación.

#### Conclusión

La integridad referencial es esencial para mantener la consistencia y la validez de las relaciones entre tablas en una base de datos relacional. MySQL proporciona mecanismos robustos para definir y aplicar estas relaciones mediante claves foráneas y restricciones. Al utilizar estas herramientas eficazmente, los diseñadores y administradores de bases de datos pueden garantizar que sus datos permanezcan coherentes y precisos a lo largo del tiempo.