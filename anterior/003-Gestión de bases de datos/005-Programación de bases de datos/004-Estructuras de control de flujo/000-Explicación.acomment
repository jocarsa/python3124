### 005-Programación de bases de datos\004-Estructuras de control de flujo

#### Introducción
En la programación de bases de datos, las estructuras de control de flujo son fundamentales para la creación de scripts y procedimientos que puedan tomar decisiones, repetir acciones y controlar el flujo de ejecución del código. Estas estructuras permiten la implementación de lógica compleja y la automatización de tareas dentro de una base de datos. MySQL, uno de los sistemas de gestión de bases de datos más populares, ofrece diversas estructuras de control de flujo que facilitan la manipulación y gestión de datos.

#### Tipos de Estructuras de Control de Flujo en MySQL

1. **Condicionales (IF, CASE)**
   - **IF...THEN...ELSE**
     La estructura `IF...THEN...ELSE` se utiliza para ejecutar un bloque de código si una condición es verdadera y otro bloque de código si la condición es falsa.
     ```sql
     IF condition THEN
         -- código a ejecutar si la condición es verdadera
     ELSE
         -- código a ejecutar si la condición es falsa
     END IF;
     ```

   - **CASE**
     La estructura `CASE` es útil para evaluar una expresión y ejecutar un bloque de código basado en el valor de la expresión.
     ```sql
     CASE
         WHEN condition1 THEN result1
         WHEN condition2 THEN result2
         ...
         ELSE default_result
     END CASE;
     ```

2. **Bucles (LOOP, WHILE, REPEAT)**
   - **LOOP**
     La estructura `LOOP` se usa para ejecutar un bloque de código repetidamente hasta que se encuentre una instrucción de salida (`LEAVE`).
     ```sql
     LOOP
         -- código repetido
         LEAVE loop_label; -- para salir del bucle
     END LOOP;
     ```

   - **WHILE**
     La estructura `WHILE` ejecuta un bloque de código mientras una condición sea verdadera.
     ```sql
     WHILE condition DO
         -- código repetido
     END WHILE;
     ```

   - **REPEAT**
     La estructura `REPEAT` ejecuta un bloque de código hasta que una condición sea verdadera.
     ```sql
     REPEAT
         -- código repetido
     UNTIL condition
     END REPEAT;
     ```

3. **Iteradores (FOR)**
   MySQL no tiene un bucle `FOR` nativo como otros lenguajes de programación. Sin embargo, se puede simular utilizando un bucle `WHILE` o `LOOP` combinado con una variable de contador.

#### Ejemplos Prácticos

1. **Uso de IF...THEN...ELSE**
   ```sql
   DELIMITER //
   CREATE PROCEDURE CheckStock(IN product_id INT)
   BEGIN
      DECLARE stock INT;
      
      SELECT quantity INTO stock FROM products WHERE id = product_id;
      
      IF stock > 0 THEN
         SELECT 'Product is in stock';
      ELSE
         SELECT 'Product is out of stock';
      END IF;
   END //
   DELIMITER ;
   ```

2. **Uso de CASE**
   ```sql
   DELIMITER //
   CREATE PROCEDURE GetEmployeeLevel(IN salary FLOAT)
   BEGIN
      CASE
         WHEN salary < 20000 THEN
             SELECT 'Junior';
         WHEN salary BETWEEN 20000 AND 50000 THEN
             SELECT 'Mid-level';
         ELSE
             SELECT 'Senior';
      END CASE;
   END //
   DELIMITER ;
   ```

3. **Uso de WHILE**
   ```sql
   DELIMITER //
   CREATE PROCEDURE CountToTen()
   BEGIN
      DECLARE counter INT DEFAULT 1;
      
      WHILE counter <= 10 DO
         SELECT counter;
         SET counter = counter + 1;
      END WHILE;
   END //
   DELIMITER ;
   ```

4. **Uso de LOOP y LEAVE**
   ```sql
   DELIMITER //
   CREATE PROCEDURE LoopExample()
   BEGIN
      DECLARE counter INT DEFAULT 1;
      myloop: LOOP
         SELECT counter;
         SET counter = counter + 1;
         
         IF counter > 10 THEN
            LEAVE myloop;
         END IF;
      END LOOP myloop;
   END //
   DELIMITER ;
   ```

5. **Uso de REPEAT**
   ```sql
   DELIMITER //
   CREATE PROCEDURE RepeatExample()
   BEGIN
      DECLARE counter INT DEFAULT 1;
      
      REPEAT
         SELECT counter;
         SET counter = counter + 1;
      UNTIL counter > 10
      END REPEAT;
   END //
   DELIMITER ;
   ```

#### Consideraciones y Buenas Prácticas
- **Legibilidad del Código:** Asegúrate de que el código sea fácil de leer y seguir. Utiliza nombres de variables descriptivos y comentarios cuando sea necesario.
- **Eficiencia:** Evita bucles innecesarios y asegúrate de que las condiciones de salida sean claras para prevenir bucles infinitos.
- **Manejo de Errores:** Implementa manejo de excepciones para tratar posibles errores durante la ejecución de los procedimientos almacenados.

Las estructuras de control de flujo son herramientas poderosas en la programación de bases de datos que permiten la automatización y ejecución eficiente de tareas complejas en MySQL. Con una comprensión clara y práctica de estas estructuras, puedes crear procedimientos almacenados más robustos y eficientes.