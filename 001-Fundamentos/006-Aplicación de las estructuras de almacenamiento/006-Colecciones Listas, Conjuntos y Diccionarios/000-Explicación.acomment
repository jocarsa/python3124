### Colecciones: Listas, Conjuntos y Diccionarios

#### Listas

Las listas son colecciones ordenadas y mutables que permiten almacenar elementos de cualquier tipo. Son muy versátiles y se utilizan para una amplia variedad de tareas.

**Creación y manipulación de listas:**
```python
# Crear una lista
frutas = ["manzana", "banana", "cereza"]

# Añadir un elemento a la lista
frutas.append("naranja")
print(frutas)  # Imprime: ['manzana', 'banana', 'cereza', 'naranja']

# Eliminar un elemento de la lista
frutas.remove("banana")
print(frutas)  # Imprime: ['manzana', 'cereza', 'naranja']

# Acceder a elementos por índice
print(frutas[1])  # Imprime: cereza

# Iterar sobre una lista
for fruta in frutas:
    print(fruta)

# Slicing (sublistas)
print(frutas[1:3])  # Imprime: ['cereza', 'naranja']
```

**Métodos comunes de las listas:**
```python
numeros = [1, 2, 3, 4, 5]

# Longitud de la lista
print(len(numeros))  # Imprime: 5

# Insertar un elemento en una posición específica
numeros.insert(2, 10)
print(numeros)  # Imprime: [1, 2, 10, 3, 4, 5]

# Ordenar la lista
numeros.sort()
print(numeros)  # Imprime: [1, 2, 3, 4, 5, 10]

# Invertir el orden de la lista
numeros.reverse()
print(numeros)  # Imprime: [10, 5, 4, 3, 2, 1]
```

#### Conjuntos

Los conjuntos son colecciones desordenadas de elementos únicos. Son útiles para operaciones de conjunto como unión, intersección y diferencia.

**Creación y manipulación de conjuntos:**
```python
# Crear un conjunto
colores = {"rojo", "verde", "azul"}

# Añadir un elemento al conjunto
colores.add("amarillo")
print(colores)  # Imprime: {'rojo', 'verde', 'azul', 'amarillo'}

# Eliminar un elemento del conjunto
colores.remove("verde")
print(colores)  # Imprime: {'rojo', 'azul', 'amarillo'}

# Comprobar si un elemento está en el conjunto
print("rojo" in colores)  # Imprime: True
print("verde" in colores)  # Imprime: False
```

**Operaciones de conjuntos:**
```python
a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

# Unión de conjuntos
union = a | b
print("Unión:", union)  # Imprime: Unión: {1, 2, 3, 4, 5, 6}

# Intersección de conjuntos
interseccion = a & b
print("Intersección:", interseccion)  # Imprime: Intersección: {3, 4}

# Diferencia de conjuntos
diferencia = a - b
print("Diferencia:", diferencia)  # Imprime: Diferencia: {1, 2}

# Diferencia simétrica
diferencia_simetrica = a ^ b
print("Diferencia simétrica:", diferencia_simetrica)  # Imprime: Diferencia simétrica: {1, 2, 5, 6}
```

#### Diccionarios

Los diccionarios son colecciones desordenadas de pares clave-valor. Son extremadamente útiles para asociar datos relacionados.

**Creación y manipulación de diccionarios:**
```python
# Crear un diccionario
edades = {"Ana": 30, "Luis": 25, "Carlos": 40}

# Añadir un nuevo par clave-valor
edades["Maria"] = 35
print(edades)  # Imprime: {'Ana': 30, 'Luis': 25, 'Carlos': 40, 'Maria': 35}

# Eliminar un par clave-valor
del edades["Luis"]
print(edades)  # Imprime: {'Ana': 30, 'Carlos': 40, 'Maria': 35}

# Acceder a un valor por su clave
print(edades["Carlos"])  # Imprime: 40

# Iterar sobre un diccionario
for nombre, edad en edades.items():
    print(f"{nombre}: {edad}")
```

**Métodos comunes de los diccionarios:**
```python
estudiantes = {"Ana": 90, "Luis": 85, "Carlos": 92}

# Obtener todas las claves
claves = estudiantes.keys()
print(claves)  # Imprime: dict_keys(['Ana', 'Luis', 'Carlos'])

# Obtener todos los valores
valores = estudiantes.values()
print(valores)  # Imprime: dict_values([90, 85, 92])

# Obtener todos los pares clave-valor
items = estudiantes.items()
print(items)  # Imprime: dict_items([('Ana', 90), ('Luis', 85), ('Carlos', 92)])

# Obtener un valor con un valor por defecto si la clave no existe
nota_maria = estudiantes.get("Maria", "No existe")
print(nota_maria)  # Imprime: No existe
```

### Ejemplo completo usando listas, conjuntos y diccionarios

A continuación se presenta un ejemplo completo que combina el uso de listas, conjuntos y diccionarios en un contexto práctico.

**Ejemplo completo:**
```python
# Lista de estudiantes
estudiantes = ["Ana", "Luis", "Carlos", "Maria", "Ana", "Luis"]

# Eliminar duplicados usando un conjunto
estudiantes_unicos = list(set(estudiantes))
print("Estudiantes únicos:", estudiantes_unicos)
# Imprime: Estudiantes únicos: ['Ana', 'Carlos', 'Maria', 'Luis']

# Diccionario para almacenar las edades de los estudiantes
edades = {"Ana": 30, "Luis": 25, "Carlos": 40, "Maria": 35}

# Añadir una nueva edad
edades["Pedro"] = 28
print("Edades actualizadas:", edades)
# Imprime: Edades actualizadas: {'Ana': 30, 'Luis': 25, 'Carlos': 40, 'Maria': 35, 'Pedro': 28}

# Filtrar estudiantes mayores de 30 años
estudiantes_mayores = {nombre: edad for nombre, edad in edades.items() if edad > 30}
print("Estudiantes mayores de 30 años:", estudiantes_mayores)
# Imprime: Estudiantes mayores de 30 años: {'Carlos': 40, 'Maria': 35}

# Lista de notas de los estudiantes
notas = [90, 85, 92, 88, 95]

# Calcular el promedio de las notas
promedio_notas = sum(notas) / len(notas)
print("Promedio de notas:", promedio_notas)
# Imprime: Promedio de notas: 90.0
```

En este ejemplo:
- Se utiliza una lista para almacenar nombres de estudiantes y se eliminan duplicados usando un conjunto.
- Se utiliza un diccionario para almacenar y actualizar las edades de los estudiantes.
- Se filtran los estudiantes mayores de 30 años utilizando comprensión de diccionarios.
- Se calcula el promedio de las notas de los estudiantes utilizando una lista.

### Resumen

- **Listas**: Colecciones ordenadas y mutables, útiles para almacenar y manipular secuencias de elementos.
- **Conjuntos**: Colecciones desordenadas de elementos únicos, útiles para operaciones de conjunto.
- **Diccionarios**: Colecciones desordenadas de pares clave-valor, útiles para asociar datos relacionados.

Estas estructuras de datos son fundamentales para manejar y organizar datos de manera eficiente en Python, proporcionando una base sólida para el desarrollo de aplicaciones complejas.